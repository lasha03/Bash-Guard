"""
Vulnerability model for representing security issues.
"""

from dataclasses import dataclass
from enum import Enum, auto
from pathlib import Path
from typing import Optional, List, Dict, Any, Tuple


class SeverityLevel(Enum):
    """Severity levels for vulnerabilities."""
    LOW = auto()
    MEDIUM = auto()
    HIGH = auto()
    CRITICAL = auto()


class VulnerabilityType(Enum):
    """Types of vulnerabilities that can be detected."""
    COMMAND_INJECTION = auto()
    ENVIRONMENT = auto()
    PATH_TRAVERSAL = auto()
    VARIABLE_EXPANSION = auto()
    PARAMETER_EXPANSION = auto()
    PRIVILEGE = auto()
    SHELLCHECK = auto()
    OTHER = auto()
    UNQUOTED_VARIABLE = auto()
    COMMAND_SUBSTITUTION = auto()
    ARRAY_INDEX_ATTACK = auto()

class Description(Enum):
    """Desciprtions for the found vulnerabilities."""
    MISSING_PATH = (
        "PATH variable is missing. For security, it's recommended to explicitly declare a safe PATH at the beginning of the script."
    )

    PARAMETER_EXPANSION_0 = (
        "Be careful when expanding parameter 0. View possible attacks ..."
    )

    VARIABLE_EXPANSION = (
        "Unquoted variables in may lead to command injection or word splitting/globbing"
    )

    COMMAND_SUBSTITUTION = (
        "Command substitution with unvalidated input may lead to command injection"
    )

    EVAL_SOURCE = (
        "eval/source command with unvalidated input is extremely dangerous"
    )

    COMMAND_INJECTION = (
        "Executin variable with unvalidated input may lead to command injection"
    )
    
    ARRAY_INDEX_ATTACK = (
        "Array index with untrusted input can lead to code execution."
    )

class Recommendation(Enum):
    """Recommendations for the found vulnerabilities."""
    VARIABLE_EXPANSION = (
        "Always quote variables when using them in commands"
    )

    COMMAND_SUBSTITUTION = (
        "Validate and sanitize all input before using it in command substituon"
    )

    EVAL_SOURCE = (
        "Avoid using eval/source with unvalidated input. Consider alternative approaches."
    )

    COMMAND_INJECTION = (
        "Validate and sanitize all input before using it in command execution"
    )
    
    ARRAY_INDEX_ATTACK = (
        "Validate and sanitize array indices, especially when they come from user input."
    )

@dataclass
class Vulnerability:
    """
    Represents a security vulnerability found in a Bash script.
    """
    
    # Basic information
    vulnerability_type: VulnerabilityType
    severity: SeverityLevel
    description: str
    
    # Location information
    file_path: Path
    line_number: int = -1
    column: Optional[int] = None
    line_content: Optional[str] = None
    
    # Additional information
    code_snippet: Optional[str] = None
    recommendation: Optional[str] = None
    cve_id: Optional[str] = None
    references: Optional[List[str]] = None
    metadata: Optional[Dict[str, Any]] = None
    
    def __post_init__(self):
        """Perform post-initialization tasks."""
        
        # tree_sitter starts indexing from 0
        if self.line_number != -1:
            self.line_number += 1
            self.column += 1 

        if self.line_content is None:
            try:
                with open(self.file_path, 'r') as f:
                    lines = f.readlines()
                    if 0 <= self.line_number - 1 < len(lines):
                        self.line_content = lines[self.line_number - 1].rstrip()
            except:
                pass
    
    def __str__(self):
        return f"""
        Vulnerability [
            type = {self.vulnerability_type},
            severity = {self.severity},
            description = {self.description},
            file_path = {self.file_path},
            line_number = {self.line_number},
            column = {self.column},
            line_content = {self.line_content}
        ]
        """